[
["index.html", "Rパッケージ開発とコーディング規約 はじめに 1 この資料の目的 1.1 なぜパッケージ開発が必要なの? 1.2 この資料における前提と制限 参考資料", " Rパッケージ開発とコーディング規約 前田和寛(@kazutan) 2019-03-16 はじめに これは広島ベイズ塾2019年春合宿にて実施した内容の資料です 1 この資料の目的 最も重要なキーワードは｢共有｣です。 1.1 なぜパッケージ開発が必要なの? 萬平さん｢ないのならば作るしかない｣ ho*om氏｢なければ作る、それがホクソエムの誓いだったはず!｣ なので作れるようになるのは大事。 TODO: あとで書く 1.2 この資料における前提と制限 TODO: あとで書く 参考資料 TODO: あとで書く "],
["01_pre_dev.html", "2 パッケージ開発環境の準備 2.1 パッケージの設置･公開場所 2.2 パッケージ開発に必要なアプリケーション 2.3 開発向けRパッケージ 2.4 参考資料", " 2 パッケージ開発環境の準備 パッケージを作成するには、いくつか準備が必要です。 2.1 パッケージの設置･公開場所 Rの仕様的には｢アクセスできればどこでもいい｣です。ただ、開発･運用･共有･公開を考えたときに、現時点ではGitHubを利用するのが最適です。今回はGitHubを前提としたパッケージ開発を説明します。 2.2 パッケージ開発に必要なアプリケーション 以下のソフトウェアが必要です: git バージョン管理システム。必須。 R 必須。 RStudio emacsとかvimでもいいけど、RStudioにはRのパッケージ開発のために色んな機能が組み込まれてます。 Webブラウザ githubにアクセスするのに必須。 2.3 開発向けRパッケージ なしでも作れますが、以下のパッケージを利用すると開発が楽になります: devtools いろいろ使う。歴史が変わった。 roxygen2 パッケージのドキュメント周りを準備するのに使用。歴史が変わった。 usethis パッケージ開発をめっちゃ楽にするパッケージ。歴史が変わった。 testthat パッケージのテストを簡単にできるようにするパッケージ。歴史が変わった。 rmarkdown ドキュメント生成。歴史が変わった。 なので、これらは入れておいてください。 2.4 参考資料 "],
["02_repo_proj.html", "3 repositoryとproject 3.1 repository、projectとは 3.2 projectの準備 3.3 repositoryの準備 3.4 projectにrepositoryを紐付ける 3.5 RStudio上でのgit操作 3.6 FAQ 3.7 参考資料", " 3 repositoryとproject 3.1 repository、projectとは repository(リポジトリ、レポジトリ)は、雑に言うとコードや画像などのファイルを束ねているものです。 https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA アプリケーションに必要なものは一つにまとめてしまったほうが開発･運用･利用が便利ですよね。 project(ここでは一般的な意味ではなくRStudio上のprojectとします)は、(すごく雑に言うと)R上でのrepositoryに(ほぼ)相当します。RStudioでプロジェクトを準備すると… 実際のタスク単位でファイルをまとめていける そのプロジェクトで色々設定することができる working directoryをプロジェクトで固定できる Rのoptionsをプロジェクト単位で設定できる history, buildとか管理できる 他にもいろいろ便利 なので、RStudioを使うなら基本的にprojectを作ってそこで作業しましょう。 今回はパッケージ開発のお話なので、それを前提としたprojectおよびrepositoryを準備していきます。 3.2 projectの準備 まずは、作るパッケージ名を考えましょう。Rのパッケージ名は[a-zA-Z0-9]で考えてください。ここではdevTestとします。 RStudioでは、パッケージ開発用にprojectを新規で準備することができます…が、今ではもっと簡単に準備できます。以下の一行でOKです: usethis::create_package(&quot;path_to_project&quot;) 引数には、自分がプロジェクトを設置したいパスを指定してください。すると以下のようになります: すると、自動的にパッケージ開発に必要なファイルが準備されます: オープンソースの世界(に限らないのですが)では、｢そのアプリケーションがどんなライセンスであるか｣は非常に重要です。ライセンスに関する説明は省略しますが、後で必ず自分で調べておいてください。 よく利用されているMITライセンスとしたいのであれば、パッケージのprojectで以下の1行を走らせればOKです: usethis::use_mit_license() 次に、このプロジェクトにgitをあてるように準備します。メニューの[Tools] - [Project Option…]へ進み、gitを有効化(初期化)します: これでprojectの準備は(ひとまず)完了です。 3.3 repositoryの準備 パッケージを設置するリポジトリを準備します。GitHubにアクセスしてログインし、repositoryを新規作成します。 リポジトリ名はさっき考えたプロジェクト名(パッケージ名)がいいでしょう。ポイントはREADMEやgitignore、LICENSEは準備しなくてOKというところです。空っぽのほうがいいです。 この後紐づけするために、以下のものをメモ(コピー)しときましょう: 3.4 projectにrepositoryを紐付ける ここがちょっと面倒で、gitの知識が必要となります。gitに関する詳しい説明は省略します。 ここではRStudioのTerminalを利用してやっていきます。先程準備したprojectを開き、RStudioのTerminalタブをクリックします。gitコマンドを利用して紐付けます。 まずGitHub上のリポジトリをremoteとして登録します: git@~~の文字列はrepository作成後にメモしたものです。 次にバージョン管理をするファイルを登録(add)してcommitします: git addはバージョン管理するファイルを登録するコマンドです。.は｢現在のディレクトリ内全部(ただし.gitignoreで外すものは除く)｣を意味します。今回は最初の登録で資料的に書くのが面倒だったので.を使いましたが、普段は極力使わないでください。 git commitはコミットをするコマンドです。コミットは、雑に言うと｢RPGのセーブみたいなもの｣です。-m &quot;message&quot;とすると、コミットメッセージを含めてそのままコミットできます。このオプションをつけないと、viなどのテキストエディタが開かれてコミットメッセージなど設定できます。ここでは省略します。 これでコミットができたので、これをGitHub上にpushします: 初回はupstream originを設定していないので、git pushだけではうまくいきません(エラーメッセージ参照)。なので2つめのコマンドのように設定してください。 なお、gitはエラーメッセージやマニュアルが丁寧なので、まずはエラーメッセージやドキュメントを読む習慣をつけましょう。 これでGitHub上のrepositoryにファイルが追加されます: 3.5 RStudio上でのgit操作 (時間があれば説明します) 3.6 FAQ gitで設定するのがすごく面倒です。どうにかなりませんか? ごめん、さっきusethis::create_from_github()を知りました。たぶんこれが一番簡単。詳しくはこの関数のヘルプを見てください 3.7 参考資料 (あとで書く) "],
["03_write_r_code.html", "4 Rのコード記述 4.1 roxygen2の記法 4.2 関数を書く 4.3 パッケージ同封データ 4.4 ヘルプファイル作成 4.5 FAQ 4.6 参考資料", " 4 Rのコード記述 4.1 roxygen2の記法 Rファイル内にドキュメント要素を記述する方法があり、roxygen2を利用すると簡単にできます。RStudioには標準で対応しているので、スムーズに入力できます。 roxygen2の記法については、Rパッケージ開発のチートシートを参照する、もしくはGitHub上にある有名なRパッケージのコードを見るといいでしょう。 4.2 関数を書く Rディレクトリ内に*.Rファイルを準備して関数などを作成してください。例えばこんな感じです: @exportは｢この関数はパッケージを読み込めば使えるようにしろ｣という指示なので、忘れないようにしてください 4.3 パッケージ同封データ 4.4 ヘルプファイル作成 *.Rファイル内にroxygen2記法で書き込んでいれば、ヘルプファイルを簡単に作成することが可能です。以下の1行を実行してください: devtools::document() これでOKです。 4.5 FAQ あとで。 4.6 参考資料 あとで。 "],
["04_test.html", "5 パッケージのテスト 5.1 testthatによるテスト 5.2 Buildしてからのテスト", " 5 パッケージのテスト 5.1 testthatによるテスト testthatでググってください。 5.2 Buildしてからのテスト パッケージをbuildするには、RStudioの[Build]タブを選択して[Install and Restart]ボタンをクリックしてください: 自動的に(一時的に)そのパッケージが読み込まれるので、実際に関数を実行してテストしてみてください: ひとつ前の章で、devtools::documents()を実行してヘルプファイルを生成しているのなら、この段階でヘルプが見れます: なお、これでパッケージビルドした内容はRを閉じると消えます。 "],
["05_deploy.html", "6 パッケージの公開とリリース 6.1 githubへのpush 6.2 バージョンとリリース", " 6 パッケージの公開とリリース 6.1 githubへのpush パッケージを作成したら、githubへpushしましょう。基本、これでOKです。 6.2 バージョンとリリース 6.2.1 DESCRIPTIONファイルを編集 パッケージ情報を作成しましょう。これはDESCRIPTIONファイルを変更していきます: なお、パッケージ依存がある場合はこのファイルに書いていく必要があるのですが、これも以下の関数で自動的に入れることができます: usethis::use_package(&quot;name_of_package&quot;, type = &quot;Imports&quot;) これでOKです 次にバージョンですが、これもDESCRIPTIONファイルに記入してください。 必要事項を記入したら、githubへpushしてください。 6.2.2 GitHubでのリリース GitHubでリリースします。GitHubの該当リポジトリへアクセスし、releaceタブをクリックしてください: バージョン名をよく確認し、リリースをすれば完了です。 "],
["06_pkgdown.html", "7 パッケージ用サイト作成 7.1 パッケージ用サイトの必要性 7.2 pkgdownを利用したサイト作成 7.3 サイトをGitHubにデプロイ", " 7 パッケージ用サイト作成 7.1 パッケージ用サイトの必要性 7.2 pkgdownを利用したサイト作成 pkgdownをインストール README.md(or README.Rmd)を準備 以下のコードを実行するだけ pkgdown::build_site() あっという間に完成. 7.3 サイトをGitHubにデプロイ pkgdownの関数でもいけるけど、今回は使わない方向で説明。 docs/ をgit add -&gt; commit -&gt; push GitHubのリポジトリサイトにアクセスし、[Settings]タブへ移動 GitHub Pagesを有効化 このとき、｢masterブランチのdocsディレクトリにする｣のを選択 ブラウザでアクセスしてチェック "],
["07_coding_rule.html", "8 コーティング規約 8.1 コーティング規約の必要性 8.2 Rのコーティング規約", " 8 コーティング規約 8.1 コーティング規約の必要性 8.2 Rのコーティング規約 This one: https://style.tidyverse.org/ "]
]
